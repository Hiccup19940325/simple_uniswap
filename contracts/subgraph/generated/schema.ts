// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Pair extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Pair entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Pair must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Pair", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Pair | null {
    return changetype<Pair | null>(
      store.get_in_block("Pair", id.toHexString())
    );
  }

  static load(id: Bytes): Pair | null {
    return changetype<Pair | null>(store.get("Pair", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get swap(): Array<Bytes> | null {
    let value = this.get("swap");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set swap(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("swap");
    } else {
      this.set("swap", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }

  get addLiquidity(): Array<Bytes> | null {
    let value = this.get("addLiquidity");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set addLiquidity(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("addLiquidity");
    } else {
      this.set("addLiquidity", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }

  get removeLiquidity(): Array<Bytes> | null {
    let value = this.get("removeLiquidity");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set removeLiquidity(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("removeLiquidity");
    } else {
      this.set("removeLiquidity", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }

  get lastUpdate(): BigInt {
    let value = this.get("lastUpdate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastUpdate(value: BigInt) {
    this.set("lastUpdate", Value.fromBigInt(value));
  }

  get updatePrice(): Array<Bytes> | null {
    let value = this.get("updatePrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set updatePrice(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("updatePrice");
    } else {
      this.set("updatePrice", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }
}

export class AddLiquidity extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AddLiquidity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type AddLiquidity must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AddLiquidity", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): AddLiquidity | null {
    return changetype<AddLiquidity | null>(
      store.get_in_block("AddLiquidity", id.toHexString())
    );
  }

  static load(id: Bytes): AddLiquidity | null {
    return changetype<AddLiquidity | null>(
      store.get("AddLiquidity", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get pair(): Bytes {
    let value = this.get("pair");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set pair(value: Bytes) {
    this.set("pair", Value.fromBytes(value));
  }

  get amountA(): BigInt {
    let value = this.get("amountA");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amountA(value: BigInt) {
    this.set("amountA", Value.fromBigInt(value));
  }

  get amountB(): BigInt {
    let value = this.get("amountB");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amountB(value: BigInt) {
    this.set("amountB", Value.fromBigInt(value));
  }

  get tokenA(): Bytes {
    let value = this.get("tokenA");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenA(value: Bytes) {
    this.set("tokenA", Value.fromBytes(value));
  }

  get tokenB(): Bytes {
    let value = this.get("tokenB");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenB(value: Bytes) {
    this.set("tokenB", Value.fromBytes(value));
  }

  get time(): BigInt {
    let value = this.get("time");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set time(value: BigInt) {
    this.set("time", Value.fromBigInt(value));
  }
}

export class RemoveLiquidity extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RemoveLiquidity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type RemoveLiquidity must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RemoveLiquidity", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): RemoveLiquidity | null {
    return changetype<RemoveLiquidity | null>(
      store.get_in_block("RemoveLiquidity", id.toHexString())
    );
  }

  static load(id: Bytes): RemoveLiquidity | null {
    return changetype<RemoveLiquidity | null>(
      store.get("RemoveLiquidity", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get pair(): Bytes {
    let value = this.get("pair");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set pair(value: Bytes) {
    this.set("pair", Value.fromBytes(value));
  }

  get amountA(): BigInt {
    let value = this.get("amountA");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amountA(value: BigInt) {
    this.set("amountA", Value.fromBigInt(value));
  }

  get amountB(): BigInt {
    let value = this.get("amountB");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amountB(value: BigInt) {
    this.set("amountB", Value.fromBigInt(value));
  }

  get tokenA(): Bytes {
    let value = this.get("tokenA");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenA(value: Bytes) {
    this.set("tokenA", Value.fromBytes(value));
  }

  get tokenB(): Bytes {
    let value = this.get("tokenB");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenB(value: Bytes) {
    this.set("tokenB", Value.fromBytes(value));
  }

  get time(): BigInt {
    let value = this.get("time");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set time(value: BigInt) {
    this.set("time", Value.fromBigInt(value));
  }
}

export class Swap extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Swap entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Swap must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Swap", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Swap | null {
    return changetype<Swap | null>(
      store.get_in_block("Swap", id.toHexString())
    );
  }

  static load(id: Bytes): Swap | null {
    return changetype<Swap | null>(store.get("Swap", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get pair(): Bytes {
    let value = this.get("pair");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set pair(value: Bytes) {
    this.set("pair", Value.fromBytes(value));
  }

  get amountIn(): BigInt {
    let value = this.get("amountIn");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amountIn(value: BigInt) {
    this.set("amountIn", Value.fromBigInt(value));
  }

  get amountOut(): BigInt {
    let value = this.get("amountOut");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amountOut(value: BigInt) {
    this.set("amountOut", Value.fromBigInt(value));
  }

  get tokenIn(): Bytes {
    let value = this.get("tokenIn");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenIn(value: Bytes) {
    this.set("tokenIn", Value.fromBytes(value));
  }

  get tokenOut(): Bytes {
    let value = this.get("tokenOut");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tokenOut(value: Bytes) {
    this.set("tokenOut", Value.fromBytes(value));
  }

  get time(): BigInt {
    let value = this.get("time");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set time(value: BigInt) {
    this.set("time", Value.fromBigInt(value));
  }
}

export class UpdatePrice extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UpdatePrice entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UpdatePrice must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UpdatePrice", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): UpdatePrice | null {
    return changetype<UpdatePrice | null>(
      store.get_in_block("UpdatePrice", id.toHexString())
    );
  }

  static load(id: Bytes): UpdatePrice | null {
    return changetype<UpdatePrice | null>(
      store.get("UpdatePrice", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get pair(): Bytes {
    let value = this.get("pair");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set pair(value: Bytes) {
    this.set("pair", Value.fromBytes(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get updateTime(): BigInt {
    let value = this.get("updateTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set updateTime(value: BigInt) {
    this.set("updateTime", Value.fromBigInt(value));
  }
}
